{"$message_type":"diagnostic","message":"attempted to define built-in macro more than once","code":{"code":"E0773","explanation":"A builtin-macro was defined more than once.\n\nErroneous code example:\n\n```compile_fail,E0773\n#![feature(decl_macro)]\n#![feature(rustc_attrs)]\n#![allow(internal_features)]\n\n#[rustc_builtin_macro]\npub macro test($item:item) {\n    /* compiler built-in */\n}\n\nmod inner {\n    #[rustc_builtin_macro]\n    pub macro test($item:item) {\n        /* compiler built-in */\n    }\n}\n```\n\nTo fix the issue, remove the duplicate declaration:\n\n```\n#![feature(decl_macro)]\n#![feature(rustc_attrs)]\n#![allow(internal_features)]\n\n#[rustc_builtin_macro]\npub macro test($item:item) {\n    /* compiler built-in */\n}\n```\n\nIn very rare edge cases, this may happen when loading `core` or `std` twice,\nonce with `check` metadata and once with `build` metadata.\nFor more information, see [#75176].\n\n[#75176]: https://github.com/rust-lang/rust/pull/75176#issuecomment-683234468\n"},"level":"error","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":48770,"byte_end":48786,"line_start":1415,"line_end":1415,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    macro_rules! cfg {","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"previously defined here","code":null,"level":"note","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":48770,"byte_end":48786,"line_start":1415,"line_end":1415,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    macro_rules! cfg {","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0773]\u001b[0m\u001b[0m\u001b[1m: attempted to define built-in macro more than once\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:1415:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1415\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    macro_rules! cfg {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: previously defined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:1415:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1415\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    macro_rules! cfg {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `sized`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `sized`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `unsize`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `unsize`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `structural_peq`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `structural_peq`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `structural_teq`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `structural_teq`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `copy`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `copy`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `clone`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `clone`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `sync`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `sync`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `discriminant_kind`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `discriminant_kind`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `discriminant_type`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `discriminant_type`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `pointee_trait`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `pointee_trait`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `metadata_type`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `metadata_type`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `dyn_metadata`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `dyn_metadata`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `freeze`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `freeze`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `fn_ptr_trait`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `fn_ptr_trait`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `fn_ptr_addr`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `fn_ptr_addr`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `drop`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `drop`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `destruct`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `destruct`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `coerce_unsized`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `coerce_unsized`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `dispatch_from_dyn`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `dispatch_from_dyn`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `transmute_opts`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `transmute_opts`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `transmute_trait`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `transmute_trait`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `add`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `add`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `sub`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `sub`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `mul`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `mul`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `div`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `div`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `rem`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `rem`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `neg`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `neg`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `not`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `not`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `bitxor`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `bitxor`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `bitand`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `bitand`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `bitor`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `bitor`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `shl`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `shl`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `shr`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `shr`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `add_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `add_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `sub_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `sub_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `mul_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `mul_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `div_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `div_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `rem_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `rem_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `bitxor_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `bitxor_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `bitand_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `bitand_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `bitor_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `bitor_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `shl_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `shl_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `shr_assign`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `shr_assign`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `index`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `index`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `index_mut`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `index_mut`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `unsafe_cell`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `unsafe_cell`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `va_list`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `va_list`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `deref`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `deref`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `deref_mut`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `deref_mut`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `deref_target`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `deref_target`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `receiver`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `receiver`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `r#fn`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `r#fn`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `fn_mut`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `fn_mut`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `fn_once`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `fn_once`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `fn_once_output`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `fn_once_output`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `iterator`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `iterator`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `future_trait`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `future_trait`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `async_iterator`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `async_iterator`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `coroutine_state`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `coroutine_state`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `coroutine`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `coroutine`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `unpin`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `unpin`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `pin`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `pin`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `eq`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `eq`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `partial_ord`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `partial_ord`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `c_void`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `c_void`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `panic`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `panic`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `panic_nounwind`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `panic_nounwind`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `panic_fmt`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `panic_fmt`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `const_panic_fmt`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `const_panic_fmt`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `panic_bounds_check`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `panic_bounds_check`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `panic_misaligned_pointer_dereference`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `panic_misaligned_pointer_dereference`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `panic_info`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `panic_info`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `panic_location`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `panic_location`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `panic_cannot_unwind`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `panic_cannot_unwind`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `panic_in_cleanup`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `panic_in_cleanup`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `format_alignment`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `format_alignment`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `format_argument`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `format_argument`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `format_arguments`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `format_arguments`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `format_count`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `format_count`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `format_placeholder`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `format_placeholder`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `format_unsafe_arg`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `format_unsafe_arg`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `drop_in_place`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `drop_in_place`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `alloc_layout`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `alloc_layout`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `ptr_unique`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `ptr_unique`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `phantom_data`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `phantom_data`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `manually_drop`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `manually_drop`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `maybe_uninit`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `maybe_uninit`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `align_offset`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `align_offset`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `Try`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `Try`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `tuple_trait`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `tuple_trait`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `slice_len_fn`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `slice_len_fn`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `from_residual`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `from_residual`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `from_output`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `from_output`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `branch`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `branch`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `from_yeet`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `from_yeet`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `pointer_like`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `pointer_like`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `const_param_ty`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `const_param_ty`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `Poll`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `Poll`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `Ready`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `Ready`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `Pending`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `Pending`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `AsyncGenReady`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `AsyncGenReady`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `AsyncGenPending`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `AsyncGenPending`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `AsyncGenFinished`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `AsyncGenFinished`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `ResumeTy`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `ResumeTy`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `get_context`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `get_context`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `Context`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `Context`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `poll`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `poll`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `async_iterator_poll_next`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `async_iterator_poll_next`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `into_async_iter_into_iter`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `into_async_iter_into_iter`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `Option`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `Option`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `Some`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `Some`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `None`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `None`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `Ok`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `Ok`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `Err`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `Err`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `Continue`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `Continue`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `Break`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `Break`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `into_future`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `into_future`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `into_iter`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `into_iter`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `next`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `next`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `new_unchecked`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `new_unchecked`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `RangeFrom`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `RangeFrom`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `RangeFull`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `RangeFull`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `RangeInclusive`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `RangeInclusive`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `range_inclusive_new`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `range_inclusive_new`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `Range`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `Range`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `RangeToInclusive`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `RangeToInclusive`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `RangeTo`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `RangeTo`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate lang item in crate `core` (which `wasabi` depends on): `CStr`.","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[],"children":[{"message":"the lang item is first defined in crate `core` (which `std` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: duplicate lang item in crate `core` (which `wasabi` depends on): `CStr`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `core` (which `std` depends on)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `core` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libcore-40d09b8221dcca96.rlib\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in `core` loaded from /Users/maton/OS_Rust/repo/wasabi/target/x86_64-unknown-uefi/debug/deps/libcore-7e5f91884be573f6.rlib\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"found duplicate lang item `panic_impl`","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[{"file_name":"src/test_runner.rs","byte_start":871,"byte_end":1017,"line_start":20,"line_end":23,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn panic(_info: &PanicInfo) -> ! {","highlight_start":1,"highlight_end":35},{"text":"    // テスト失敗 → QEMU を異常終了コードで終了させる","highlight_start":1,"highlight_end":35},{"text":"    exit_qemu(QemuExitCode::Fail);","highlight_start":1,"highlight_end":35},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the lang item is first defined in crate `std` (which `wasabi` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `std` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libstd-891794ada4c89111.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in the local crate (`wasabi`)","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: found duplicate lang item `panic_impl`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/test_runner.rs:20:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn panic(_info: &PanicInfo) -> ! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // テスト失敗 → QEMU を異常終了コードで終了させる\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    exit_qemu(QemuExitCode::Fail);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `std` (which `wasabi` depends on)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `std` loaded from /Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/x86_64-unknown-uefi/lib/libstd-891794ada4c89111.rlib\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in the local crate (`wasabi`)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the size for values of type `()` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/graphics.rs","byte_start":1416,"byte_end":1426,"line_start":42,"line_end":42,"column_start":74,"column_end":84,"is_primary":true,"text":[{"text":"pub fn draw_point<T: Bitmap>(buf: &mut T, color: u32, x: i64, y: i64) -> Result<()> {","highlight_start":74,"highlight_end":84}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `core::marker::Sized` is not implemented for `()`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `core::result::Result`","code":null,"level":"note","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs","byte_start":18263,"byte_end":18264,"line_start":502,"line_end":502,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"pub enum Result<T, E> {","highlight_start":17,"highlight_end":18}],"label":"required by this bound in `Result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `()` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/graphics.rs:42:74\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m-> Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `core::marker::Sized` is not implemented for `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `core::result::Result`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:502:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum Result<T, E> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the size for values of type `&'static str` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/graphics.rs","byte_start":1416,"byte_end":1426,"line_start":42,"line_end":42,"column_start":74,"column_end":84,"is_primary":true,"text":[{"text":"pub fn draw_point<T: Bitmap>(buf: &mut T, color: u32, x: i64, y: i64) -> Result<()> {","highlight_start":74,"highlight_end":84}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `core::marker::Sized` is not implemented for `&'static str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `core::result::Result`","code":null,"level":"note","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs","byte_start":18266,"byte_end":18267,"line_start":502,"line_end":502,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"pub enum Result<T, E> {","highlight_start":20,"highlight_end":21}],"label":"required by this bound in `Result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `&'static str` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/graphics.rs:42:74\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m-> Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `core::marker::Sized` is not implemented for `&'static str`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `core::result::Result`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:502:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum Result<T, E> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the size for values of type `()` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/graphics.rs","byte_start":1622,"byte_end":1632,"line_start":54,"line_end":54,"column_start":6,"column_end":16,"is_primary":true,"text":[{"text":") -> Result<()> {","highlight_start":6,"highlight_end":16}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `core::marker::Sized` is not implemented for `()`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `core::result::Result`","code":null,"level":"note","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs","byte_start":18263,"byte_end":18264,"line_start":502,"line_end":502,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"pub enum Result<T, E> {","highlight_start":17,"highlight_end":18}],"label":"required by this bound in `Result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `()` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/graphics.rs:54:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m) -> Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `core::marker::Sized` is not implemented for `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `core::result::Result`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:502:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum Result<T, E> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the size for values of type `&'static str` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/graphics.rs","byte_start":1622,"byte_end":1632,"line_start":54,"line_end":54,"column_start":6,"column_end":16,"is_primary":true,"text":[{"text":") -> Result<()> {","highlight_start":6,"highlight_end":16}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `core::marker::Sized` is not implemented for `&'static str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `core::result::Result`","code":null,"level":"note","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs","byte_start":18266,"byte_end":18267,"line_start":502,"line_end":502,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"pub enum Result<T, E> {","highlight_start":20,"highlight_end":21}],"label":"required by this bound in `Result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `&'static str` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/graphics.rs:54:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m) -> Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `core::marker::Sized` is not implemented for `&'static str`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `core::result::Result`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:502:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum Result<T, E> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the size for values of type `()` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/graphics.rs","byte_start":2381,"byte_end":2391,"line_start":91,"line_end":91,"column_start":6,"column_end":16,"is_primary":true,"text":[{"text":") -> Result<()> {","highlight_start":6,"highlight_end":16}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `core::marker::Sized` is not implemented for `()`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `core::result::Result`","code":null,"level":"note","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs","byte_start":18263,"byte_end":18264,"line_start":502,"line_end":502,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"pub enum Result<T, E> {","highlight_start":17,"highlight_end":18}],"label":"required by this bound in `Result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `()` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/graphics.rs:91:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m) -> Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `core::marker::Sized` is not implemented for `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `core::result::Result`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:502:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum Result<T, E> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the size for values of type `&'static str` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/graphics.rs","byte_start":2381,"byte_end":2391,"line_start":91,"line_end":91,"column_start":6,"column_end":16,"is_primary":true,"text":[{"text":") -> Result<()> {","highlight_start":6,"highlight_end":16}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `core::marker::Sized` is not implemented for `&'static str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `core::result::Result`","code":null,"level":"note","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs","byte_start":18266,"byte_end":18267,"line_start":502,"line_end":502,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"pub enum Result<T, E> {","highlight_start":20,"highlight_end":21}],"label":"required by this bound in `Result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `&'static str` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/graphics.rs:91:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m) -> Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `core::marker::Sized` is not implemented for `&'static str`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `core::result::Result`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:502:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum Result<T, E> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the size for values of type `&'a EfiGraphicsOutputProtocol<'a>` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/uefi.rs","byte_start":13028,"byte_end":13069,"line_start":278,"line_end":278,"column_start":6,"column_end":47,"is_primary":true,"text":[{"text":") -> Result<&'a EfiGraphicsOutputProtocol<'a>> {","highlight_start":6,"highlight_end":47}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `core::marker::Sized` is not implemented for `&'a EfiGraphicsOutputProtocol<'a>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `core::result::Result`","code":null,"level":"note","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs","byte_start":18263,"byte_end":18264,"line_start":502,"line_end":502,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"pub enum Result<T, E> {","highlight_start":17,"highlight_end":18}],"label":"required by this bound in `Result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `&'a EfiGraphicsOutputProtocol<'a>` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/uefi.rs:278:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m) -> Result<&'a EfiGraphicsOutputProtocol<'a>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `core::marker::Sized` is not implemented for `&'a EfiGraphicsOutputProtocol<'a>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `core::result::Result`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:502:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum Result<T, E> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the size for values of type `&'static str` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/uefi.rs","byte_start":13028,"byte_end":13069,"line_start":278,"line_end":278,"column_start":6,"column_end":47,"is_primary":true,"text":[{"text":") -> Result<&'a EfiGraphicsOutputProtocol<'a>> {","highlight_start":6,"highlight_end":47}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `core::marker::Sized` is not implemented for `&'static str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `core::result::Result`","code":null,"level":"note","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs","byte_start":18266,"byte_end":18267,"line_start":502,"line_end":502,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"pub enum Result<T, E> {","highlight_start":20,"highlight_end":21}],"label":"required by this bound in `Result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `&'static str` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/uefi.rs:278:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m) -> Result<&'a EfiGraphicsOutputProtocol<'a>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `core::marker::Sized` is not implemented for `&'static str`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `core::result::Result`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:502:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum Result<T, E> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the size for values of type `VramBufferInfo` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/uefi.rs","byte_start":26867,"byte_end":26889,"line_start":557,"line_end":557,"column_start":56,"column_end":78,"is_primary":true,"text":[{"text":"pub fn init_vram(efi_system_table: &EfiSystemTable) -> Result<VramBufferInfo> {","highlight_start":56,"highlight_end":78}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `core::marker::Sized` is not implemented for `VramBufferInfo`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `core::result::Result`","code":null,"level":"note","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs","byte_start":18263,"byte_end":18264,"line_start":502,"line_end":502,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"pub enum Result<T, E> {","highlight_start":17,"highlight_end":18}],"label":"required by this bound in `Result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `VramBufferInfo` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/uefi.rs:557:56\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m557\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mystemTable) -> Result<VramBufferInfo> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `core::marker::Sized` is not implemented for `VramBufferInfo`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `core::result::Result`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:502:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum Result<T, E> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the size for values of type `&'static str` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/uefi.rs","byte_start":26867,"byte_end":26889,"line_start":557,"line_end":557,"column_start":56,"column_end":78,"is_primary":true,"text":[{"text":"pub fn init_vram(efi_system_table: &EfiSystemTable) -> Result<VramBufferInfo> {","highlight_start":56,"highlight_end":78}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `core::marker::Sized` is not implemented for `&'static str`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `core::result::Result`","code":null,"level":"note","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs","byte_start":18266,"byte_end":18267,"line_start":502,"line_end":502,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"pub enum Result<T, E> {","highlight_start":20,"highlight_end":21}],"label":"required by this bound in `Result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `&'static str` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/uefi.rs:557:56\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m557\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mystemTable) -> Result<VramBufferInfo> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `core::marker::Sized` is not implemented for `&'static str`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `core::result::Result`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:502:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum Result<T, E> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the size for values of type `()` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/uefi.rs","byte_start":28875,"byte_end":28886,"line_start":605,"line_end":605,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn write_str(&mut self, s: &str) -> fmt::Result {","highlight_start":41,"highlight_end":52}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `core::marker::Sized` is not implemented for `()`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `core::result::Result`","code":null,"level":"note","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs","byte_start":18263,"byte_end":18264,"line_start":502,"line_end":502,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"pub enum Result<T, E> {","highlight_start":17,"highlight_end":18}],"label":"required by this bound in `Result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `()` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/uefi.rs:605:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m605\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn write_str(&mut self, s: &str) -> fmt::Result {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `core::marker::Sized` is not implemented for `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `core::result::Result`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:502:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum Result<T, E> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the size for values of type `core::fmt::Error` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/uefi.rs","byte_start":28875,"byte_end":28886,"line_start":605,"line_end":605,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn write_str(&mut self, s: &str) -> fmt::Result {","highlight_start":41,"highlight_end":52}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `core::marker::Sized` is not implemented for `core::fmt::Error`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `core::result::Result`","code":null,"level":"note","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs","byte_start":18266,"byte_end":18267,"line_start":502,"line_end":502,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"pub enum Result<T, E> {","highlight_start":20,"highlight_end":21}],"label":"required by this bound in `Result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `core::fmt::Error` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/uefi.rs:605:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m605\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn write_str(&mut self, s: &str) -> fmt::Result {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `core::result::Result`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:502:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum Result<T, E> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Result`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `core_panic_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `core_panic_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `assert_eq_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `assert_eq_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `assert_ne_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `assert_ne_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `cfg_match`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `cfg_match`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `debug_assert_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `debug_assert_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `debug_assert_eq_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `debug_assert_eq_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `debug_assert_ne_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `debug_assert_ne_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `matches_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `matches_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `write_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `write_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `writeln_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `writeln_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `unreachable_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `unreachable_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `unimplemented_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `unimplemented_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `todo_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `todo_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `format_args_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `format_args_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `env_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `env_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `option_env_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `option_env_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `include_str_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `include_str_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `include_bytes_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `include_bytes_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `include_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `include_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `assert_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `assert_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `NonZeroU8`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `NonZeroU8`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `NonZeroU16`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `NonZeroU16`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `NonZeroU32`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `NonZeroU32`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `NonZeroU64`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `NonZeroU64`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `NonZeroU128`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `NonZeroU128`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `NonZeroUsize`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `NonZeroUsize`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `NonZeroI8`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `NonZeroI8`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `NonZeroI16`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `NonZeroI16`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `NonZeroI32`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `NonZeroI32`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `NonZeroI64`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `NonZeroI64`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `NonZeroI128`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `NonZeroI128`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `NonZeroIsize`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `NonZeroIsize`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Saturating`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Saturating`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Wrapping`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Wrapping`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_basic_block`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_basic_block`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_unwind_terminate_reason`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_unwind_terminate_reason`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_unwind_continue`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_unwind_continue`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_unwind_unreachable`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_unwind_unreachable`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_unwind_terminate`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_unwind_terminate`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_unwind_cleanup`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_unwind_cleanup`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_return`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_return`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_goto`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_goto`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_unreachable`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_unreachable`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_drop`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_drop`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_call`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_call`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_unwind_resume`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_unwind_resume`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_storage_live`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_storage_live`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_storage_dead`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_storage_dead`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_deinit`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_deinit`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_checked`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_checked`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_len`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_len`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_copy_for_deref`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_copy_for_deref`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_retag`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_retag`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_move`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_move`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_static`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_static`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_static_mut`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_static_mut`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_discriminant`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_discriminant`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_set_discriminant`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_set_discriminant`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_offset`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_offset`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_field`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_field`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_variant`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_variant`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_cast_transmute`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_cast_transmute`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_make_place`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_make_place`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mir_debuginfo`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mir_debuginfo`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_copy_nonoverlapping`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_copy_nonoverlapping`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_copy`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_copy`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_write_bytes`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_write_bytes`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mem_forget`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mem_forget`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mem_size_of`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mem_size_of`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mem_size_of_val`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mem_size_of_val`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `needs_drop`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `needs_drop`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mem_zeroed`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mem_zeroed`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mem_uninitialized`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mem_uninitialized`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mem_swap`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mem_swap`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mem_replace`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mem_replace`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mem_drop`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mem_drop`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mem_discriminant`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mem_discriminant`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mem_variant_count`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mem_variant_count`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `NonNull`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `NonNull`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_drop_in_place`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_drop_in_place`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_null`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_null`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_null_mut`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_null_mut`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_from_ref`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_from_ref`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_slice_from_raw_parts`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_slice_from_raw_parts`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_slice_from_raw_parts_mut`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_slice_from_raw_parts_mut`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_swap`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_swap`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_swap_nonoverlapping`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_swap_nonoverlapping`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_replace`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_replace`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_read`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_read`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_read_unaligned`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_read_unaligned`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_write`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_write`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_write_unaligned`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_write_unaligned`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_read_volatile`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_read_volatile`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_write_volatile`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_write_volatile`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_eq`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_eq`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Borrow`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Borrow`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Clone`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Clone`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `PartialEq`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `PartialEq`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Eq`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Eq`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Ord`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Ord`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `PartialOrd`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `PartialOrd`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `cmp_min`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `cmp_min`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `cmp_max`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `cmp_max`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `convert_identity`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `convert_identity`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `AsRef`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `AsRef`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `AsMut`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `AsMut`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Into`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Into`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `From`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `From`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `TryInto`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `TryInto`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `TryFrom`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `TryFrom`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Default`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Default`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Error`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Error`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Send`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Send`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Copy`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Copy`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Sync`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Sync`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Deref`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Deref`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `RangeBounds`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `RangeBounds`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `FromResidual`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `FromResidual`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Any`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Any`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ArrayIntoIter`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ArrayIntoIter`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `RefCell`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `RefCell`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `RefCellRef`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `RefCellRef`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `RefCellRefMut`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `RefCellRefMut`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `IterPeekable`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `IterPeekable`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `IterEmpty`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `IterEmpty`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `IterOnce`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `IterOnce`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `iter_repeat`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `iter_repeat`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `FromIterator`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `FromIterator`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `IntoIterator`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `IntoIterator`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `DoubleEndedIterator`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `DoubleEndedIterator`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Iterator`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Iterator`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `IpAddr`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `IpAddr`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Option`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Option`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `unwind_safe_trait`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `unwind_safe_trait`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ref_unwind_safe_trait`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ref_unwind_safe_trait`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `core_panic_2015_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `core_panic_2015_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `core_panic_2021_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `core_panic_2021_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `unreachable_2015_macro`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `unreachable_2015_macro`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `panic_str`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `panic_str`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `unreachable_display`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `unreachable_display`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Result`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Result`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `atomic_mod`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `atomic_mod`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `AtomicBool`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `AtomicBool`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `AtomicPtr`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `AtomicPtr`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Ordering`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Ordering`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `AtomicI8`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `AtomicI8`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `AtomicU8`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `AtomicU8`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `AtomicI16`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `AtomicI16`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `AtomicU16`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `AtomicU16`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `AtomicI32`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `AtomicI32`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `AtomicU32`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `AtomicU32`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `AtomicI64`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `AtomicI64`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `AtomicU64`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `AtomicU64`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `AtomicIsize`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `AtomicIsize`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `AtomicUsize`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `AtomicUsize`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `fence`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `fence`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `compiler_fence`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `compiler_fence`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `DebugStruct`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `DebugStruct`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ArgumentMethods`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ArgumentMethods`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Alignment`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Alignment`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Formatter`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Formatter`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Debug`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Debug`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Display`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Display`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Pointer`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Pointer`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Hash`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Hash`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `SliceIndex`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `SliceIndex`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `SliceIter`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `SliceIter`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `slice_from_raw_parts`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `slice_from_raw_parts`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `slice_from_raw_parts_mut`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `slice_from_raw_parts_mut`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `str_from_utf8`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `str_from_utf8`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `str_from_utf8_mut`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `str_from_utf8_mut`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `str_from_utf8_unchecked`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `str_from_utf8_unchecked`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `str_from_utf8_unchecked_mut`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `str_from_utf8_unchecked_mut`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `Duration`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `Duration`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `IntoFuture`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `IntoFuture`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `cmp_partialeq_eq`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `cmp_partialeq_eq`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `cmp_partialeq_ne`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `cmp_partialeq_ne`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ord_cmp_method`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ord_cmp_method`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `from_fn`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `from_fn`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `try_from_fn`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `try_from_fn`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `default_fn`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `default_fn`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `add`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `add`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `sub`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `sub`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `mul`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `mul`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `div`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `div`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `rem`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `rem`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `neg`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `neg`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `deref_target`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `deref_target`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `deref_method`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `deref_method`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `deref_mut_method`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `deref_mut_method`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `IndexOutput`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `IndexOutput`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `from_iter_fn`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `from_iter_fn`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `IteratorItem`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `IteratorItem`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `IteratorMap`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `IteratorMap`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `iterator_collect_fn`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `iterator_collect_fn`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `from_str_method`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `from_str_method`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `FutureOutput`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `FutureOutput`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `f32_nan`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `f32_nan`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `f64_nan`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `f64_nan`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `maybe_uninit_uninit`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `maybe_uninit_uninit`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `maybe_uninit_zeroed`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `maybe_uninit_zeroed`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `assume_init`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `assume_init`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_const_is_null`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_const_is_null`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `const_ptr_cast`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `const_ptr_cast`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_cast_mut`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_cast_mut`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_is_null`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_is_null`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_cast`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_cast`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `ptr_cast_const`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `ptr_cast_const`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `noop_method_borrow`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `noop_method_borrow`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `noop_method_clone`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `noop_method_clone`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `noop_method_deref`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `noop_method_deref`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `unsafe_cell_raw_get`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `unsafe_cell_raw_get`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `str_split_whitespace`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `str_split_whitespace`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `str_trim`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `str_trim`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `str_trim_start`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `str_trim_start`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `str_trim_end`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `str_trim_end`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `transmute`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `transmute`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `intrinsics_unaligned_volatile_load`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `intrinsics_unaligned_volatile_load`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate diagnostic item in crate `core`: `intrinsics_unaligned_volatile_store`.","code":null,"level":"error","spans":[],"children":[{"message":"the diagnostic item is first defined in crate `core`.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: duplicate diagnostic item in crate `core`: `intrinsics_unaligned_volatile_store`.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the diagnostic item is first defined in crate `core`.\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the size for values of type `usize` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49393,"byte_end":49440,"line_start":1402,"line_end":1402,"column_start":27,"column_end":74,"is_primary":true,"text":[{"text":"    crate::hint::must_use({builtin # offset_of($Container, $($fields).+)})","highlight_start":27,"highlight_end":74}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/uefi.rs","byte_start":17676,"byte_end":17724,"line_start":369,"line_end":369,"column_start":23,"column_end":71,"is_primary":false,"text":[{"text":"const _: () = assert!(offset_of!(EfiBootServicesTable, get_memory_map) == 56);","highlight_start":23,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"offset_of!","def_site_span":{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49262,"byte_end":49281,"line_start":1400,"line_end":1400,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro offset_of($Container:ty, $($fields:tt).+ $(,)?) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49394,"byte_end":49439,"line_start":1402,"line_end":1402,"column_start":28,"column_end":73,"is_primary":false,"text":[{"text":"    crate::hint::must_use({builtin # offset_of($Container, $($fields).+)})","highlight_start":28,"highlight_end":73}],"label":"this tail expression is of type `usize`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/uefi.rs","byte_start":17676,"byte_end":17724,"line_start":369,"line_end":369,"column_start":23,"column_end":71,"is_primary":false,"text":[{"text":"const _: () = assert!(offset_of!(EfiBootServicesTable, get_memory_map) == 56);","highlight_start":23,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"offset_of!","def_site_span":{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49262,"byte_end":49281,"line_start":1400,"line_end":1400,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro offset_of($Container:ty, $($fields:tt).+ $(,)?) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49371,"byte_end":49392,"line_start":1402,"line_end":1402,"column_start":5,"column_end":26,"is_primary":false,"text":[{"text":"    crate::hint::must_use({builtin # offset_of($Container, $($fields).+)})","highlight_start":5,"highlight_end":26}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/uefi.rs","byte_start":17676,"byte_end":17724,"line_start":369,"line_end":369,"column_start":23,"column_end":71,"is_primary":false,"text":[{"text":"const _: () = assert!(offset_of!(EfiBootServicesTable, get_memory_map) == 56);","highlight_start":23,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"offset_of!","def_site_span":{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49262,"byte_end":49281,"line_start":1400,"line_end":1400,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro offset_of($Container:ty, $($fields:tt).+ $(,)?) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `core::marker::Sized` is not implemented for `usize`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `core::hint::must_use`","code":null,"level":"note","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/hint.rs","byte_start":17483,"byte_end":17484,"line_start":457,"line_end":457,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"pub const fn must_use<T>(value: T) -> T {","highlight_start":23,"highlight_end":24}],"label":"required by this bound in `must_use`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `usize` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/uefi.rs:369:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m369\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mt!(offset_of!(EfiBootServicesTable, get_memory_map) == 56);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthis tail expression is of type `usize`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `core::marker::Sized` is not implemented for `usize`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `core::hint::must_use`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/hint.rs:457:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub const fn must_use<T>(value: T) -> T {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `must_use`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the size for values of type `usize` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49393,"byte_end":49440,"line_start":1402,"line_end":1402,"column_start":27,"column_end":74,"is_primary":true,"text":[{"text":"    crate::hint::must_use({builtin # offset_of($Container, $($fields).+)})","highlight_start":27,"highlight_end":74}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/uefi.rs","byte_start":18037,"byte_end":18089,"line_start":374,"line_end":374,"column_start":23,"column_end":75,"is_primary":false,"text":[{"text":"const _: () = assert!(offset_of!(EfiBootServicesTable, exit_boot_services) == 232);","highlight_start":23,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"offset_of!","def_site_span":{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49262,"byte_end":49281,"line_start":1400,"line_end":1400,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro offset_of($Container:ty, $($fields:tt).+ $(,)?) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49394,"byte_end":49439,"line_start":1402,"line_end":1402,"column_start":28,"column_end":73,"is_primary":false,"text":[{"text":"    crate::hint::must_use({builtin # offset_of($Container, $($fields).+)})","highlight_start":28,"highlight_end":73}],"label":"this tail expression is of type `usize`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/uefi.rs","byte_start":18037,"byte_end":18089,"line_start":374,"line_end":374,"column_start":23,"column_end":75,"is_primary":false,"text":[{"text":"const _: () = assert!(offset_of!(EfiBootServicesTable, exit_boot_services) == 232);","highlight_start":23,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"offset_of!","def_site_span":{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49262,"byte_end":49281,"line_start":1400,"line_end":1400,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro offset_of($Container:ty, $($fields:tt).+ $(,)?) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49371,"byte_end":49392,"line_start":1402,"line_end":1402,"column_start":5,"column_end":26,"is_primary":false,"text":[{"text":"    crate::hint::must_use({builtin # offset_of($Container, $($fields).+)})","highlight_start":5,"highlight_end":26}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/uefi.rs","byte_start":18037,"byte_end":18089,"line_start":374,"line_end":374,"column_start":23,"column_end":75,"is_primary":false,"text":[{"text":"const _: () = assert!(offset_of!(EfiBootServicesTable, exit_boot_services) == 232);","highlight_start":23,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"offset_of!","def_site_span":{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49262,"byte_end":49281,"line_start":1400,"line_end":1400,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro offset_of($Container:ty, $($fields:tt).+ $(,)?) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `core::marker::Sized` is not implemented for `usize`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `core::hint::must_use`","code":null,"level":"note","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/hint.rs","byte_start":17483,"byte_end":17484,"line_start":457,"line_end":457,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"pub const fn must_use<T>(value: T) -> T {","highlight_start":23,"highlight_end":24}],"label":"required by this bound in `must_use`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `usize` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/uefi.rs:374:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m374\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mt!(offset_of!(EfiBootServicesTable, exit_boot_services) ==\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthis tail expression is of type `usize`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `core::marker::Sized` is not implemented for `usize`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `core::hint::must_use`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/hint.rs:457:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub const fn must_use<T>(value: T) -> T {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `must_use`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the size for values of type `usize` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49393,"byte_end":49440,"line_start":1402,"line_end":1402,"column_start":27,"column_end":74,"is_primary":true,"text":[{"text":"    crate::hint::must_use({builtin # offset_of($Container, $($fields).+)})","highlight_start":27,"highlight_end":74}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/uefi.rs","byte_start":18403,"byte_end":18452,"line_start":379,"line_end":379,"column_start":23,"column_end":72,"is_primary":false,"text":[{"text":"const _: () = assert!(offset_of!(EfiBootServicesTable, locate_protocol) == 320);","highlight_start":23,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"offset_of!","def_site_span":{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49262,"byte_end":49281,"line_start":1400,"line_end":1400,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro offset_of($Container:ty, $($fields:tt).+ $(,)?) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49394,"byte_end":49439,"line_start":1402,"line_end":1402,"column_start":28,"column_end":73,"is_primary":false,"text":[{"text":"    crate::hint::must_use({builtin # offset_of($Container, $($fields).+)})","highlight_start":28,"highlight_end":73}],"label":"this tail expression is of type `usize`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/uefi.rs","byte_start":18403,"byte_end":18452,"line_start":379,"line_end":379,"column_start":23,"column_end":72,"is_primary":false,"text":[{"text":"const _: () = assert!(offset_of!(EfiBootServicesTable, locate_protocol) == 320);","highlight_start":23,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"offset_of!","def_site_span":{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49262,"byte_end":49281,"line_start":1400,"line_end":1400,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro offset_of($Container:ty, $($fields:tt).+ $(,)?) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49371,"byte_end":49392,"line_start":1402,"line_end":1402,"column_start":5,"column_end":26,"is_primary":false,"text":[{"text":"    crate::hint::must_use({builtin # offset_of($Container, $($fields).+)})","highlight_start":5,"highlight_end":26}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/uefi.rs","byte_start":18403,"byte_end":18452,"line_start":379,"line_end":379,"column_start":23,"column_end":72,"is_primary":false,"text":[{"text":"const _: () = assert!(offset_of!(EfiBootServicesTable, locate_protocol) == 320);","highlight_start":23,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"offset_of!","def_site_span":{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49262,"byte_end":49281,"line_start":1400,"line_end":1400,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro offset_of($Container:ty, $($fields:tt).+ $(,)?) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `core::marker::Sized` is not implemented for `usize`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `core::hint::must_use`","code":null,"level":"note","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/hint.rs","byte_start":17483,"byte_end":17484,"line_start":457,"line_end":457,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"pub const fn must_use<T>(value: T) -> T {","highlight_start":23,"highlight_end":24}],"label":"required by this bound in `must_use`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `usize` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/uefi.rs:379:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m379\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mt!(offset_of!(EfiBootServicesTable, locate_protocol) == 320);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthis tail expression is of type `usize`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `core::marker::Sized` is not implemented for `usize`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `core::hint::must_use`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/hint.rs:457:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub const fn must_use<T>(value: T) -> T {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `must_use`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the size for values of type `usize` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49393,"byte_end":49440,"line_start":1402,"line_end":1402,"column_start":27,"column_end":74,"is_primary":true,"text":[{"text":"    crate::hint::must_use({builtin # offset_of($Container, $($fields).+)})","highlight_start":27,"highlight_end":74}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/uefi.rs","byte_start":20369,"byte_end":20410,"line_start":409,"line_end":409,"column_start":23,"column_end":64,"is_primary":false,"text":[{"text":"const _: () = assert!(offset_of!(EfiSystemTable, boot_services) == 96);","highlight_start":23,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"offset_of!","def_site_span":{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49262,"byte_end":49281,"line_start":1400,"line_end":1400,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro offset_of($Container:ty, $($fields:tt).+ $(,)?) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49394,"byte_end":49439,"line_start":1402,"line_end":1402,"column_start":28,"column_end":73,"is_primary":false,"text":[{"text":"    crate::hint::must_use({builtin # offset_of($Container, $($fields).+)})","highlight_start":28,"highlight_end":73}],"label":"this tail expression is of type `usize`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/uefi.rs","byte_start":20369,"byte_end":20410,"line_start":409,"line_end":409,"column_start":23,"column_end":64,"is_primary":false,"text":[{"text":"const _: () = assert!(offset_of!(EfiSystemTable, boot_services) == 96);","highlight_start":23,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"offset_of!","def_site_span":{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49262,"byte_end":49281,"line_start":1400,"line_end":1400,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro offset_of($Container:ty, $($fields:tt).+ $(,)?) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49371,"byte_end":49392,"line_start":1402,"line_end":1402,"column_start":5,"column_end":26,"is_primary":false,"text":[{"text":"    crate::hint::must_use({builtin # offset_of($Container, $($fields).+)})","highlight_start":5,"highlight_end":26}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/uefi.rs","byte_start":20369,"byte_end":20410,"line_start":409,"line_end":409,"column_start":23,"column_end":64,"is_primary":false,"text":[{"text":"const _: () = assert!(offset_of!(EfiSystemTable, boot_services) == 96);","highlight_start":23,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"offset_of!","def_site_span":{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":49262,"byte_end":49281,"line_start":1400,"line_end":1400,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro offset_of($Container:ty, $($fields:tt).+ $(,)?) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `core::marker::Sized` is not implemented for `usize`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `core::hint::must_use`","code":null,"level":"note","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/hint.rs","byte_start":17483,"byte_end":17484,"line_start":457,"line_end":457,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"pub const fn must_use<T>(value: T) -> T {","highlight_start":23,"highlight_end":24}],"label":"required by this bound in `must_use`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `usize` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/uefi.rs:409:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m409\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mssert!(offset_of!(EfiSystemTable, boot_services) == 96);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthis tail expression is of type `usize`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `core::marker::Sized` is not implemented for `usize`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `core::hint::must_use`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/hint.rs:457:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub const fn must_use<T>(value: T) -> T {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `must_use`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `offset_of` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the size for values of type `EfiGraphicsOutputProtocolPixelInfo` cannot be known at compilation time","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/uefi.rs","byte_start":22134,"byte_end":22168,"line_start":445,"line_end":445,"column_start":33,"column_end":67,"is_primary":true,"text":[{"text":"const _: () = assert!(size_of::<EfiGraphicsOutputProtocolPixelInfo>() == 36);","highlight_start":33,"highlight_end":67}],"label":"doesn't have a size known at compile-time","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `core::marker::Sized` is not implemented for `EfiGraphicsOutputProtocolPixelInfo`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `core::mem::size_of`","code":null,"level":"note","spans":[{"file_name":"/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs","byte_start":11377,"byte_end":11378,"line_start":312,"line_end":312,"column_start":22,"column_end":23,"is_primary":true,"text":[{"text":"pub const fn size_of<T>() -> usize {","highlight_start":22,"highlight_end":23}],"label":"required by this bound in `size_of`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the size for values of type `EfiGraphicsOutputProtocolPixelInfo` cannot be known at compilation time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/uefi.rs:445:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m445\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mize_of::<EfiGraphicsOutputProtocolPixelInfo>() == 36);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mdoesn't have a size known at compile-time\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `core::marker::Sized` is not implemented for `EfiGraphicsOutputProtocolPixelInfo`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `core::mem::size_of`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/maton/.rustup/toolchains/nightly-2024-01-01-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/mem/mod.rs:312:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m312\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub const fn size_of<T>() -> usize {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `size_of`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 366 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 366 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0152, E0277, E0773.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0152, E0277, E0773.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0152`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0152`.\u001b[0m\n"}
